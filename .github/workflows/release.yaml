name: Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Build on the oldest supported images, so we have broader compatibility
jobs:
  macOS:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install brew packages
        run: |
          brew update >/dev/null
          brew install --overwrite python@3.11
          brew install pyenv
          brew install pipenv
      - name: Setup environment and dependencies
        run: |
          env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install 3.9.12
          pipenv sync --dev
      - name: Create binaries
        run: |
          pipenv run pyinstaller -F --noconfirm --hiddenimport mido.backends.rtmidi client.py
          pipenv run pyinstaller -F --noconfirm --hiddenimport mido.backends.rtmidi server.py
      - name: Upload binaries
        run: |
          cd dist
          tar czvf network-midi-hub-osx.tgz client server
      - uses: actions/upload-artifact@v2
        with:
          name: network-midi-hub-osx
          path: dist/*.tgz
          retention-days: 1
          if-no-files-found: error

  linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install packages
        run: |
          curl https://pyenv.run | bash
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev \
          libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
          libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev \
          liblzma-dev python-openssl git
          sudo apt install libasound2-dev libjack-dev
          sudo apt install pipenv
          pip install --upgrade pip
      - name: Setup environment and dependencies
        run: |
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install 3.9.12
          pipenv sync --dev
      - name: Create binaries
        run: |
          pipenv run pyinstaller -F --noconfirm --hiddenimport mido.backends.rtmidi client.py
          pipenv run pyinstaller -F --noconfirm --hiddenimport mido.backends.rtmidi server.py
      - name: Upload binaries
        run: |
          cd dist
          tar czvf network-midi-hub-linux.tgz client server
      - uses: actions/upload-artifact@v2
        with:
          name: network-midi-hub-linux
          path: dist/*.tgz
          retention-days: 1
          if-no-files-found: error

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install packages
        run: |
          choco install --allow-empty-checksums pyenv-win pip
          pip install pipenv
      - name: Setup environment and dependencies
        run: |
          set PYTHON_CONFIGURE_OPTS '--enable-shared'
          C:\Users\runneradmin\.pyenv\pyenv-win\bin\pyenv install 3.9.12
          refreshenv
          pipenv run pip install -r requirements-dev.txt
      - name: Create binaries
        run: |
          pipenv run pyinstaller -F --noconfirm --hiddenimport mido.backends.rtmidi client.py
          pipenv run pyinstaller -F --noconfirm --hiddenimport mido.backends.rtmidi server.py
      - name: Upload binaries
        run: |
          cd dist
          tar czvf network-midi-hub-windows.tgz *.exe
      - uses: actions/upload-artifact@v2
        with:
          name: network-midi-hub-windows
          path: dist/*.tgz
          retention-days: 1
          if-no-files-found: error

  publish:
    needs: [linux,  macOS, windows]
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v2
      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.run_number }}
          echo "TAG_NAME=b${TAG_NAME}" >> $GITHUB_ENV
      - if: github.event_name == 'pull_request'
        run: |
          TAG_NAME=${{ github.head_ref }}
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
      - if: env.TAG_NAME == github.head_ref
        run: echo 'SUBJECT=network-midi-hub (prerelease) build' >> $GITHUB_ENV
      - if: env.TAG_NAME != github.head_ref
        run: echo 'SUBJECT=network-midi-hub release build' >> $GITHUB_ENV
      - if: env.TAG_NAME == github.head_ref
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          delete_release: true
          tag_name: nightly
      - uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG_NAME }}
          name: ${{ needs.linux.outputs.release }}
          prerelease: ${{ env.TAG_NAME == github.head_ref }}
          commitish: ${{ github.sha }}
          gzip: false
          allow_override: ${{ env.TAG_NAME == github.head_ref }}
          files: |
            network-midi-hub-linux.tgz:./network-midi-hub-linux/network-midi-hub-linux.tgz
            network-midi-hub-osx.tgz:./network-midi-hub-osx/network-midi-hub-osx.tgz
            network-midi-hub-windows.tgz:./network-midi-hub-windows/network-midi-hub-windows.tgz
          body: |
            ${{ env.SUBJECT }}
